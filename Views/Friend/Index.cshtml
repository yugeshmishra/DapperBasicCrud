@model IPagedList<DapperBasicCrud.Models.Friend>

<h2>Friends</h2>

@{
    ViewBag.Title = "Index";

}
@using PagedList.Mvc;
@using PagedList;

<div class="row pb-3">
    <div class="col-md-4">
        <form method="get" action="@Url.Action("Index")">
            <input name="Search" type="search" placeholder="Search" value="@ViewBag.Request.Search" />
            <button class="btn btn-primary">Search</button>
        </form>
    </div>

   

    <div class="col-md-6 text-end">
        @Html.ActionLink("Create New", "Create", null,
        new { @class = "btn btn-primary" })

       <a href="@Url.Action("Index")"><button class="btn btn-primary">Refresh</button></a>
        <button class="btn btn-primary" onclick="PrintOnlyTable()">Print</button>
        <button class="btn btn-primary" type="submit" value="openFullscreen()" onclick="openFullscreen()">FullScreen</button>
        <a   style="float:left;" href="@Url.Action("ExportToExcel","Friend")">ExportToExcel</a>
    </div>
</div>

<script>
    function PrintOnlyTable() {
        var HTML = $("html");
        var cln = document.documentElement.innerHTML;
        HTML.html($("table"));
        window.print();
        document.documentElement.innerHTML = cln;
        return false;
    }
</script>

<script>

    var elem = document.documentElement;
    function openFullscreen() {
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
        } else if (elem.webkitRequestFullscreen) {
            elem.webkitRequestFullscreen();
        } else if (elem.msRequestFullscreen) {
            elem.msRequestFullscreen();
        }
    }
</script>

<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Name", "Index"
                 , new DapperBasicCrud.Models.RequestModel
                 {
                     Search = ViewBag.Request.Search,
                     OrderBy = "name",
                     IsDescending = (ViewBag.Request.OrderBy == "name"
                                     &&
                                     ViewBag.Request.IsDescending == false) ? true : false
                 }, null)
        </th>
        <th>
            @Html.ActionLink("City", "Index"
                 , new DapperBasicCrud.Models.RequestModel
                 {
                     Search = ViewBag.Request.Search,
                     OrderBy = "city",
                     IsDescending = (ViewBag.Request.OrderBy == "city"
                                     &&
                                     ViewBag.Request.IsDescending == false) ? true : false
                 }, null)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.City)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PhoneNumber)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            </td>
        </tr>
    }

</table>

    @Html.PagedListPager(Model, i => Url.Action("Index", "Friend", new { i, search = Request.QueryString["search"] }),
       new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded, DisplayPageCountAndCurrentLocation = true, DisplayItemSliceAndTotal = true })



